---
- name: GATHER VMS SLATED FOR DELETION
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  tags:
    - infra
    - cloud_instance
  tasks:
    - name: Gather VM details of current deployment
      shell: |
        cloud_instance gather -d {{ deployment_id }}
      register: instances

    - name: Build ansible inventory dynamically
      add_host:
        # id
        name: "{{ item.public_ip }}"
        id: "{{ item.id }}"

        # locality
        cloud: "{{ item.cloud }}"
        region: "{{ item.region }}"
        zone: "{{ item.zone }}"

        # addresses
        public_hostname: "{{ item.public_hostname }}"
        public_ip: "{{ item.public_ip }}"
        private_hostname: "{{ item.private_hostname }}"
        private_ip: "{{ item.private_ip }}"

        # tags
        ansible_user: "{{ item.ansible_user }}"
        ansible_host: "{{ item.public_ip }}"
        groups: "{{ item.inventory_groups }}"
        cluster_name: "{{ item.cluster_name }}"
        group_name: "{{ item.group_name }}"
        extra_vars: "{{ item.extra_vars }}"
      loop: "{{ instances.stdout | from_json }}"

    - name: Get list of instances slated to be removed
      shell: |
        cloud_instance slated \
          -d {{ deployment_id }} \
          --deployment '{{ deployment | to_json }}'
      register: instances

    - name: create a variable to list all vms slated for deletion
      debug:
        msg: "{{ item.public_ip }}"
      loop: "{{ (instances.stdout | from_json) }}"

    - name: add group tobedeleted to slated VMs
      add_host:
        # id
        name: "{{ item.public_ip }}"
        id: "{{ item.id }}"

        # locality
        cloud: "{{ item.cloud }}"
        region: "{{ item.region }}"
        zone: "{{ item.zone }}"

        # addresses
        public_hostname: "{{ item.public_hostname }}"
        public_ip: "{{ item.public_ip }}"
        private_hostname: "{{ item.private_hostname }}"
        private_ip: "{{ item.private_ip }}"

        # tags
        ansible_user: "{{ item.ansible_user }}"
        ansible_host: "{{ item.public_ip }}"
        groups: "{{ item.inventory_groups + ['tobedeleted'] }}"
        cluster_name: "{{ item.cluster_name }}"
        group_name: "{{ item.group_name }}"
        extra_vars: "{{ item.extra_vars }}"
      loop: "{{ instances.stdout | from_json }}"

- name: DECOMMISSION COCKROACHDB NODES
  hosts: "{{ groups['cockroachdb'] | difference(groups['tobedeleted'] | default([]) ) }}"
  gather_facts: yes
  run_once: yes
  become: yes
  vars:
    node_ids: []
  tags:
    - platform
  tasks:
    - name: CockroachDB - get node status for all nodes, including already decommissioned
      shell: |
        cockroach node status --all --format json \
          --certs-dir=/var/lib/cockroach/certs \
      register: out

    - name: Printing cockroach node status output
      debug:
        var: out.stdout | from_json

    - name: get node_id for the VMs slated to be removed
      set_fact:
        node_ids: "{{ node_ids + [item.id]  }}"
      loop: "{{ out.stdout | from_json }}"
      when: "'tobedeleted' in groups and item.address.split(':')[0] in groups['tobedeleted']"

    - name: printing node_ids to be decommissioned
      debug:
        var: node_ids

    - name: Wait until all nodes are drained
      shell: |
        for i in {{ node_ids | join(' ') }} ; do
          cockroach node drain $i \
            --certs-dir /var/lib/cockroach/certs \
            --host={{ ansible_host }}:26357 &
        done
        wait
      args:
        executable: /bin/bash
      register: out
      when: node_ids | length > 0

    - name: Print drain node output
      debug:
        var: out.stdout

    - name: Decommission the nodes
      shell: |
        cockroach node decommission {{ node_ids | join(' ') }} \
          --certs-dir /var/lib/cockroach/certs \
          --host={{ ansible_host }}:26357
      register: out
      when: node_ids | length > 0

    - name: Re-issue the cockroach node decommission command
      shell: |
        cockroach node decommission {{ node_ids | join(' ') }} \
          --certs-dir /var/lib/cockroach/certs \
          --host={{ ansible_host }}:26357
      register: out
      when: node_ids | length > 0

    - name: Print last few output lines of decommission command
      debug:
        var: out.stdout_lines[-4:]

- name: REMOVE VMS OF DECOMMISSIONED NODES
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  tags:
    - infra
    - cloud_instance
  tasks:
    - name: Remove instances
      shell: |
        cloud_instance create -d {{ deployment_id }} \
          --deployment '{{ deployment | to_json }}' \
          --defaults '{}'
      register: instances

    # - name: Build ansible inventory dynamically
    #   add_host:
    #     # id
    #     name: "{{ item.public_ip }}"
    #     id: "{{ item.id }}"

    #     # locality
    #     cloud: "{{ item.cloud }}"
    #     region: "{{ item.region }}"
    #     zone: "{{ item.zone }}"

    #     # addresses
    #     public_hostname: "{{ item.public_hostname }}"
    #     public_ip: "{{ item.public_ip }}"
    #     private_hostname: "{{ item.private_hostname }}"
    #     private_ip: "{{ item.private_ip }}"

    #     # tags
    #     ansible_user: "{{ item.ansible_user }}"
    #     ansible_host: "{{ item.public_ip }}"
    #     groups: "{{ item.inventory_groups }}"
    #     cluster_name: "{{ item.cluster_name }}"
    #     group_name: "{{ item.group_name }}"
    #     extra_vars: "{{ item.extra_vars }}"
    #   loop: "{{ instances.stdout | from_json }}"

- name: DEPLOY COCKROACHDB-HAPROXY
  hosts: "{{ groups['haproxy'] | difference(groups['tobedeleted'] | default([]) ) }}"
  gather_facts: yes
  become: yes
  vars:
    haproxy_group: "{{ groups[cluster_name] | intersect(groups['cockroachdb']) | difference(groups['tobedeleted'] | default([]) ) }}"
    haproxy_port: 26257
    haproxy_checkport: 8080
    haproxy_serverprefix: cockroach
  tags:
    - platform
    - haproxy
  tasks:
    - name: Install haproxy on debian
      when: ansible_facts.os_family | lower == 'debian'
      shell: |
        apt update
        apt install -y haproxy

    - name: Install haproxy on redhat
      when: ansible_facts.os_family | lower == 'redhat'
      shell: |
        dnf update -y
        dnf install -y haproxy

    - name: Copy haproxy.cfg
      copy:
        content: |
          global
            maxconn 4096
          defaults
              mode                tcp
              timeout connect     10s
              timeout client      10m
              timeout server      10m
              # TCP keep-alive on client side. Server already enables them.
              option              clitcpka

          listen psql
              bind :{{ haproxy_port }}
              mode tcp
              balance roundrobin
              option httpchk GET /health?ready=1
          {% for host in haproxy_group %}
          {% if hostvars[host].extra_vars.crdb_region | default(hostvars[host].region) == extra_vars.crdb_region | default(region) %}
              server {{ haproxy_serverprefix }}-{{ loop.index }} {{ hostvars[host].private_hostname }}:{{ haproxy_port }} check port {{ haproxy_checkport }}
          {% endif %}
          {% endfor %}

          listen http
              bind :{{ haproxy_checkport }}
              mode tcp
              balance roundrobin
              option httpchk GET /health?ready=1
          {% for host in haproxy_group %}
          {% if hostvars[host].extra_vars.crdb_region | default(hostvars[host].region) == extra_vars.crdb_region | default(region) %}
             server {{ haproxy_serverprefix }}-{{ loop.index }} {{ hostvars[host].private_hostname }}:{{ haproxy_checkport }} check port {{ haproxy_checkport }}
          {% endif %}
          {% endfor %}

        dest: /etc/haproxy/haproxy.cfg
        mode: 0644
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        backup: yes
        force: yes

    # TODO: just reload config if already running
    # https://www.haproxy.com/blog/hitless-reloads-with-haproxy-howto
    - name: Start haproxy
      shell: |
        systemctl restart haproxy

- name: GATHER FACTS ON ALL COCKROACHDB NODES
  hosts: "{{ groups['cockroachdb'] | difference(groups['tobedeleted'] | default([]) ) }}"
  gather_facts: yes
  become: yes
  tags:
    - platform
  tasks:
    - name: Group hosts dynamically based on region
      group_by:
        key: "crdbregion_{{ region }}"

- name: REFRESH SYSTEMD SERVICE FILE ON REMAINING COCKROACHDB NODES
  hosts: "{{ groups['cockroachdb'] | difference(groups['tobedeleted'] | default([]) ) }}"
  gather_facts: yes
  become: yes
  vars:
    # cockroachdb_version  - from extra_vars
    cockroachdb_secure: yes
    cockroachdb_certificates_dir: "certs"
    cockroachdb_sql_port: 26257
    cockroachdb_rpc_port: 26357
    cockroachdb_http_addr_ip: "0.0.0.0"
    cockroachdb_http_addr_port: 8080
    cockroachdb_certificates_clients:
      - root
    cockroachdb_store: []
    cockroachdb_secure_flag: --certs-dir=/var/lib/cockroach/certs
    cockroachdb_insecure_flag: --insecure
    cockroachdb_repo_url: https://binaries.cockroachdb.com
    cockroachdb_locality: "cloud={{ cloud }},region={{ region }},zone={{ zone }}"
    cockroachdb_advertise_addr: "{{ public_ip }}"
    cockroachdb_listen_addr: "0.0.0.0"
    cockroachdb_attrs: std
    cockroachdb_cache: ".35"
    cockroachdb_max_sql_memory: ".35"
    cockroachdb_max_offset: 250ms
    cockroachdb_env_vars: []
  tags:
    - platform
    - cockroachdb
  tasks:
    - name: Find attached disks
      shell: |
        lsblk -o NAME,TYPE,SIZE -p -n -b -s | \
          awk '$NF ~ /[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/' | \
          grep -v '└─' | \
          grep disk | \
          awk '{print $1}'
      args:
        executable: /bin/bash
      register: _disks

    - name: Reset cockroachdb_store
      when: _disks.stdout_lines | length > 0
      set_fact:
        cockroachdb_store: []

    - name: Set cockroachdb_store
      when: _disks.stdout_lines | length > 0
      set_fact:
        cockroachdb_store: "{{ cockroachdb_store + ['/mnt/cockroach' + idx|string] }}"
      loop: "{{ _disks.stdout_lines }}"
      loop_control:
        index_var: idx

    - name: Copy systemd template cockroachdb.service
      copy:
        content: |
          [Unit]
          Description=Cockroach Database cluster node
          Requires=network.target
          [Service]
          Type=notify
          WorkingDirectory=/var/lib/cockroach
          {% for v in cockroachdb_env_vars %}
          Environment="{{ v }}"
          {% endfor %}
          ExecStart=/usr/local/bin/cockroach start \
              {{ (cockroachdb_secure) | ternary(cockroachdb_secure_flag, cockroachdb_insecure_flag) }} \
              {% for store in cockroachdb_store %}
              --store={{ store }} \
              {% endfor %}
              --listen-addr={{ cockroachdb_listen_addr }}:{{ cockroachdb_rpc_port }} \
              --advertise-addr={{ cockroachdb_advertise_addr }}:{{ cockroachdb_rpc_port }} \
              --sql-addr=:{{ cockroachdb_sql_port }} \
              --cache={{ cockroachdb_cache }} \
              --max-sql-memory={{ cockroachdb_max_sql_memory }} \
              --http-addr={{ cockroachdb_http_addr_ip }}:{{ cockroachdb_http_addr_port }} \
              {% for g in groups %}
              {% if g.startswith("crdbregion_") %}
              {% for joinhost in groups[g][:3] %}
              --join={{ hostvars[joinhost].public_ip }}:{{ cockroachdb_rpc_port }} \
              {% endfor%}
              {% endif %}
              {% endfor %}
              --locality={{ cockroachdb_locality }} \
              --attrs={{ cockroachdb_attrs }} \
              --max-offset={{ cockroachdb_max_offset }}
          TimeoutStopSec=300
          LimitNOFILE=65000
          Restart=on-abnormal
          RestartSec=10
          StandardOutput=syslog
          StandardError=syslog
          SyslogIdentifier=cockroach
          User=cockroach
          [Install]
          WantedBy=default.target
        dest: /etc/systemd/system/cockroachdb.service
        mode: 0644
        owner: root
        group: root
        backup: yes
        force: yes

    - name: Ensure cockroachdb service file is reloaded
      shell: |
        systemctl daemon-reload

- name: GET DATA FROM COCKROACHDB CLUSTER
  hosts: localhost
  gather_facts: no
  become: no
  tasks:
    - name: Collect cloud, region and public_ip for cockroachdb servers
      set_fact:
        cockroachdb: >-
          {{
            groups['cockroachdb']
            | map('extract', hostvars) 
            | map('dict2items')                  
            | map('selectattr', 'key', 'in', ['ansible_host', 'cloud', 'region', 'public_ip'])
            | map('items2dict')    | list              
          }}

    - name: Collect cloud, region and public_ip for haproxy servers
      set_fact:
        haproxy: >-
          {{
            groups['haproxy']
            | map('extract', hostvars) 
            | map('dict2items')                  
            | map('selectattr', 'key', 'in', ['ansible_host', 'cloud', 'region', 'public_ip'])
            | map('items2dict')    | list              
          }}

    - name: Data
      debug:
        msg:
          cockroachdb: "{{ cockroachdb }}"
          haproxy: "{{ haproxy }}"

